struct node* segregateEvenOdd(struct node *head_ref)
{
 
    struct node *prev = NULL;
    struct node *curr = head_ref;
    struct node *even = NULL;
    struct node *odd = NULL;
    struct node *odd_end = NULL;
    if(head_ref == NULL)
    {
        return NULL;
    }
    if(curr->data%2 == 0)
    {
        even = curr;
        while(curr!= NULL && curr->data%2 ==0)
        {
            prev = curr;
            curr = curr->next;
        }
        if(curr == NULL)
        {
            return even;
        }
        else
        {   
            odd = curr;
            odd_end = curr;
            prev->next = curr->next;
            curr = curr->next;
            odd->next = NULL;
        }
    }
    else
    {
        
        odd = curr;
        while(curr!= NULL && curr->data%2 !=0)
        {
            prev = curr;
            curr = curr->next;
        }
        if(curr == NULL)
        {
            return odd;
        }
        else
        {   
            even = curr;
            odd_end = prev;
            prev->next = NULL;
        }
    }
 
    while(curr != NULL)
    {
        
        if(curr->data%2 == 0)
        {
            prev = curr;
            curr = curr->next;
        }
        else
        {
            prev->next = curr->next;
            odd_end->next = curr;
            odd_end = odd_end->next;
            curr = curr->next;
            odd_end->next = NULL;
        }
    }
    prev->next = odd;
    return even;
}
